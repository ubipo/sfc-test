{"version":3,"file":"vue-concurrency.module.js","sources":["../../src/utils/general.ts","../../src/TaskInstance.ts","../../src/Task.ts","../../src/wrap-utils.ts","../../src/utils/ssr-utils.ts","../../src/TaskGroup.ts"],"sourcesContent":["import { computed, Ref, watch, reactive } from \"./api\";\nimport useTask, { Task } from \"../Task\";\nimport { TaskInstance } from \"../TaskInstance\";\nimport { AbortSignalWithPromise } from \"../types/index\";\n\nexport function waitForValue<T = any>(cb: () => T): Promise<T> {\n  return new Promise((resolve) => {\n    const stop = watch(cb, value => {\n      if (value !== undefined && value !== null) {\n        resolve(value);\n        stop && stop();\n      }\n    }, { immediate: true });\n  });\n}\n\nexport const reachedMaxConcurrency = (task: Task<any, any>): boolean =>\n  task._runningInstances.length >= task._maxConcurrency;\n\nexport const cancelFirstRunning = (task: Task<any, any>): void => {\n  const firstRunningInstance = task._activeInstances[0];\n  if (firstRunningInstance) {\n    firstRunningInstance.cancel();\n  }\n};\n\nexport const dropEnqueued = (task: Task<any, any>): void => {\n  task._enqueuedInstances.forEach((instance) => {\n    instance.isEnqueued = false;\n    instance.isDropped = true;\n  });\n};\n\ntype BooleanKeys<T> = {\n  [k in keyof T]: T[k] extends boolean ? k : never;\n}[keyof T];\n\nexport function filteredInstances(\n  cb: () => Task<any, any>,\n  key: BooleanKeys<TaskInstance<any>>\n) {\n  if (!key) {\n    return computed(() => []);\n  }\n\n  return computedFilterBy(() => cb()._instances, key);\n}\n\nfunction computedFilterBy<T>(cb: () => T[], key: keyof T, value?: any) {\n  return computed(() => {\n    const collection = cb();\n    return collection.filter((item) => {\n      const curr = item[key];\n      if (value) {\n        return curr === value;\n      }\n\n      return curr;\n    });\n  });\n}\n\nexport function computedLength(cb: () => any[]): Readonly<Ref<number>> {\n  return computed(() => {\n    const arr = cb();\n    return arr.length;\n  });\n}\n\nexport function computedLastOf<T>(cb: () => readonly T[]): Ref<T | undefined> {\n  return computed(() => {\n    const collection = cb();\n    return collection[collection.length - 1];\n  });\n}\n\nexport function computedFirstOf<T>(\n  cb: () => readonly T[]\n): Readonly<Ref<T | undefined>> {\n  return computed(() => {\n    const collection = cb();\n    return collection[0];\n  });\n}\n\nexport type Reactive<T> = {\n  [K in keyof T]: T[K] extends Ref<infer U> ? U : T[K];\n};\n\nexport const _reactiveContent = <T>(obj: T) => {\n  return obj as Reactive<T>;\n};\n\nexport function _reactive<T extends object>(obj: T) {\n  return reactive(obj) as T;\n}\n\nexport type DeferredObject<T> = {\n  promise: Promise<T>;\n  resolve: Function;\n  reject: Function;\n};\nexport function defer<T>(): DeferredObject<T> {\n  const deferredObject: Record<string, any> = {};\n  const promise = new Promise((resolve, reject) => {\n    deferredObject.resolve = resolve;\n    deferredObject.reject = reject;\n  });\n  deferredObject.promise = promise as Promise<T>;\n\n  return deferredObject as DeferredObject<T>;\n}\n\nexport function printTask(task: Task<any, any>) {\n  let taskType = \"General\";\n\n  if (task._isDropping) {\n    taskType = \"Drop\";\n  }\n\n  if (task._isEnqueuing) {\n    taskType = \"Enqueue\";\n  }\n\n  if (task._isRestartable) {\n    taskType = \"Restartable\";\n  }\n\n  if (task._isKeepingLatest) {\n    taskType = \"KeepLatest\";\n  }\n\n  let header = `${taskType} Task`;\n\n  if (taskType !== \"General\") {\n    header = `${header} with maxConcurrency ${task._maxConcurrency}`;\n  }\n\n  const instanceRows = task._instances.map((instance) => {\n    let colorEmoji;\n\n    if (instance.isSuccessful) {\n      colorEmoji = \"🍏\";\n    } else if (instance.isRunning || instance.isEnqueued) {\n      colorEmoji = \"🍊\";\n    } else if (instance.isError || instance.isCanceled || instance.isDropped) {\n      colorEmoji = \"🔴\";\n    }\n\n    const { status, value, error } = instance;\n    return { status: `${colorEmoji} ${status}`, value, error };\n  });\n\n  console.log(`🚦 ${header}`);\n  console.table(instanceRows);\n}\n\nexport function timeout(time) {\n  if (process.env.NODE_ENV === \"test\") {\n    return Promise.resolve();\n  }\n\n  return new Promise((resolve) => setTimeout(resolve, time));\n}\n\nexport function getCancelToken<T extends { CancelToken: any }>(\n  axios: T,\n  signal: AbortSignalWithPromise\n) {\n  return new axios.CancelToken((cancel) => {\n    signal.pr.catch((reason) => {\n      if (reason === \"cancel\") {\n        cancel();\n      }\n    });\n  });\n}\n\nexport function useAsyncTask<T, U extends any[]>(\n  fn: (signal: AbortSignalWithPromise, ...params: U) => Promise<T>\n) {\n  return useTask(function* (signal, ...params: U) {\n    return fn(signal, ...params);\n  });\n}\n","import CAF from \"caf\";\nimport { computed } from \"./utils/api\";\nimport { _reactive, _reactiveContent, DeferredObject, defer } from \"./utils/general\";\nimport {\n  AbortSignalWithPromise,\n  TaskCb,\n  onFulfilled,\n  onRejected,\n} from \"./types/index\";\n\nexport type TaskInstanceStatus =\n  | \"running\"\n  | \"enqueued\"\n  | \"canceled\"\n  | \"canceling\"\n  | \"dropped\"\n  | \"error\"\n  | \"success\";\nexport interface TaskInstance<T> extends PromiseLike<any> {\n  id: number;\n\n  // Lifecycle\n  hasStarted: boolean;\n  isRunning: boolean;\n  isActive: boolean;\n  isFinished: boolean;\n  isError: boolean;\n  isSuccessful: boolean;\n\n  isCanceling: boolean;\n  isCanceled: boolean;\n\n  isNotDropped: boolean;\n  status: TaskInstanceStatus;\n\n  _run: () => void;\n  cancel: () => void;\n  canceledOn: (signal: AbortSignalWithPromise) => TaskInstance<T>;\n  token?: Record<string, any>;\n\n  // Concurrency\n  isDropped: boolean;\n  isEnqueued: boolean;\n\n  // Data State\n  value: T | null;\n  error: any | null;\n\n  // Promise-like stuff\n  _shouldThrow: boolean;\n  _deferredObject: DeferredObject<T>;\n  _handled: boolean; // this is needed to set to true so that Vue does show error about unhandled rejection\n  then: (onfulfilled: onFulfilled<T>, onrejected?: onRejected) => Promise<any>;\n  catch: (onrejected?: onRejected) => any;\n  finally: (onfulfilled: () => any) => any;\n}\n\nexport interface ModifierOptions {\n  drop: boolean;\n  enqueue: boolean;\n}\n\nexport interface TaskInstanceOptions {\n  id: number;\n  modifiers: ModifierOptions;\n  onFinish: (taskInstance: TaskInstance<any>) => any;\n}\n\nexport default function createTaskInstance<T>(\n  cb: TaskCb<T, any>,\n  params: any[],\n  options: TaskInstanceOptions\n): TaskInstance<T> {\n  // Initial State\n  const content = _reactiveContent({\n    id: options.id,\n    isDropped: false,\n    isEnqueued: false,\n\n    hasStarted: false,\n    isRunning: false,\n    isFinished: false,\n    isCanceling: false,\n    isCanceled: computed(\n      () => taskInstance.isCanceling && taskInstance.isFinished\n    ),\n    isActive: computed(\n      () => taskInstance.isRunning && !taskInstance.isCanceling\n    ),\n    isSuccessful: false,\n    isNotDropped: computed(() => !taskInstance.isDropped),\n    isError: computed(() => !!taskInstance.error),\n    status: computed(() => {\n      const t = taskInstance;\n      const match = [\n        [t.isRunning, \"running\"],\n        [t.isEnqueued, \"enqueued\"],\n        [t.isCanceled, \"canceled\"],\n        [t.isCanceling, \"canceling\"],\n        [t.isDropped, \"dropped\"],\n        [t.isError, \"error\"],\n        [t.isSuccessful, \"success\"],\n      ].find(([cond]) => cond) as [boolean, TaskInstanceStatus];\n      return match && match[1];\n    }),\n\n    error: null,\n    value: null,\n    cancel() {\n      taskInstance.isCanceling = true;\n\n      if (taskInstance.isEnqueued) {\n        taskInstance.isFinished = true;\n      }\n\n      taskInstance.isEnqueued = false;\n\n      if (taskInstance.token) {\n        taskInstance.token.abort(\"cancel\");\n      }\n    },\n    canceledOn(signal: AbortSignalWithPromise) {\n      signal.pr.catch((e) => {\n        taskInstance.cancel();\n      });\n\n      return taskInstance;\n    },\n    _run() {\n      runTaskInstance(taskInstance, cb, params, options);\n    },\n\n    // PromiseLike things. These are necessary so that TaskInstance is `then`able and can be `await`ed\n\n    // Workaround for Vue not to scream because of unhandled rejection. Task is always \"handled\" because the error is saved to taskInstance.error.\n    _handled: true,\n    _deferredObject: defer<T>(),\n    _shouldThrow: false, // task throws only if it's used promise-like way (then, catch, await)\n    then(onFulfilled, onRejected) {\n      taskInstance._shouldThrow = true;\n      return taskInstance._deferredObject.promise.then(onFulfilled, onRejected);\n    },\n    catch(onRejected) {\n      taskInstance._shouldThrow = true;\n      return taskInstance._deferredObject.promise.catch(onRejected);\n    },\n    finally(cb) {\n      taskInstance._shouldThrow = true;\n      return taskInstance._deferredObject.promise.finally(cb);\n    },\n  });\n\n  // Create\n  const taskInstance: TaskInstance<T> = _reactive(content);\n\n  // Process = drop, enqueue or run right away!\n  const { modifiers } = options;\n  if (modifiers.drop) {\n    taskInstance.isDropped = true;\n  } else if (modifiers.enqueue) {\n    taskInstance.isEnqueued = true;\n  } else {\n    taskInstance._run();\n  }\n\n  return taskInstance;\n}\n\nfunction runTaskInstance<T>(\n  taskInstance: TaskInstance<any>,\n  cb: TaskCb<T, any>,\n  params: any[],\n  options: TaskInstanceOptions\n): void {\n  const token = new (CAF as any).cancelToken();\n  const cancelable = (CAF as any)(cb, token);\n  taskInstance.token = token;\n\n  taskInstance.hasStarted = true;\n  taskInstance.isRunning = true;\n  taskInstance.isEnqueued = false;\n\n  function setFinished() {\n    taskInstance.isRunning = false;\n    taskInstance.isFinished = true;\n  }\n\n  cancelable\n    .call(taskInstance, token, ...params)\n    .then((value) => {\n      taskInstance.value = value;\n      taskInstance.isSuccessful = true;\n\n      setFinished();\n      taskInstance._deferredObject.resolve(value);\n      options.onFinish(taskInstance);\n    })\n    .catch((e) => {\n      if (e !== \"cancel\") {\n        taskInstance.error = e;\n      }\n\n      setFinished();\n      if (taskInstance._shouldThrow) {\n        taskInstance._deferredObject.reject(e);\n      }\n      options.onFinish(taskInstance);\n    });\n}\n","import { computed, onUnmounted } from \"./utils/api\";\nimport createTaskInstance, {\n  TaskInstance,\n  ModifierOptions,\n} from \"./TaskInstance\";\nimport {\n  reachedMaxConcurrency,\n  cancelFirstRunning,\n  filteredInstances,\n  computedLength,\n  computedLastOf,\n  computedFirstOf,\n  _reactive,\n  _reactiveContent,\n  dropEnqueued,\n} from \"./utils/general\";\nimport { Resolved, TaskCb } from \"./types/index\";\n\nexport type Task<T, U extends any[]> = {\n  // Lifecycle state\n  isIdle: boolean;\n  isRunning: boolean;\n  isError: boolean;\n  performCount: number;\n\n  // Shortcuts to useful instances\n  last: TaskInstance<T> | undefined;\n  lastSuccessful: TaskInstance<T> | undefined;\n  firstEnqueued: TaskInstance<T> | undefined;\n\n  // Action Methods\n  cancelAll: () => void;\n  perform: (...params: U) => TaskInstance<T>;\n  clear: () => void;\n\n  // Modifiers\n  restartable: () => Task<T, U>;\n  drop: () => Task<T, U>;\n  enqueue: () => Task<T, U>;\n  keepLatest: () => Task<T, U>;\n  maxConcurrency: (number) => Task<T, U>;\n  _resetModifierFlags: () => void;\n\n  // Modifier flags\n  _maxConcurrency: number;\n  _isRestartable: boolean;\n  _isEnqueuing: boolean;\n  _isDropping: boolean;\n  _isKeepingLatest: boolean;\n\n  _hasConcurrency: boolean;\n\n  // Instances\n  _instances: TaskInstance<T>[];\n  _successfulInstances: readonly TaskInstance<T>[];\n  _runningInstances: readonly TaskInstance<T>[];\n  _activeInstances: readonly TaskInstance<T>[];\n  _enqueuedInstances: readonly TaskInstance<T>[];\n  _notDroppedInstances: readonly TaskInstance<T>[];\n};\n\nexport default function useTask<T, U extends any[]>(\n  cb: TaskCb<T, U>\n): Task<Resolved<T>, U> {\n  const content = _reactiveContent({\n    _isRestartable: false,\n    _isDropping: false,\n    _isEnqueuing: false,\n    _isKeepingLatest: false,\n    _maxConcurrency: 1, // this is used only when concurrency modifier is active (otherwise it has no effect)\n    _hasConcurrency: computed(\n      () =>\n        task._isRestartable ||\n        task._isDropping ||\n        task._isEnqueuing ||\n        task._isKeepingLatest\n    ),\n\n    isIdle: computed(() => !task.isRunning),\n    isRunning: computed(\n      () => !!task._instances.find((instance) => instance.isRunning)\n    ),\n    isError: computed(() => !!(task.last && task.last.isError)),\n\n    _instances: [],\n    // TODO: the filter + lastOf combo is concise and clear, but more efficient would be classic loop and iterating from the end (findLastIf macro)\n    _successfulInstances: filteredInstances(() => task, \"isSuccessful\"),\n    _runningInstances: filteredInstances(() => task, \"isRunning\"),\n    _enqueuedInstances: filteredInstances(() => task, \"isEnqueued\"),\n    _notDroppedInstances: filteredInstances(() => task, \"isNotDropped\"),\n    _activeInstances: filteredInstances(() => task, \"isActive\"),\n    performCount: computedLength(() => task._instances),\n    last: computedLastOf(() => task._notDroppedInstances),\n    lastSuccessful: computedLastOf(() => task._successfulInstances),\n    firstEnqueued: computedFirstOf(() => task._enqueuedInstances),\n\n    cancelAll() {\n      // Cancel all running and enqueued instances. Finished and dropped instances can't really be canceled.\n      task._instances.forEach(\n        (taskInstance) => {\n          try {\n            if (!taskInstance.isDropped && !taskInstance.isFinished) {\n              taskInstance.cancel();\n            }\n          } catch (e) {\n            if (e !== \"cancel\") {\n              throw e;\n            }\n          }\n        }\n      );\n    },\n\n    perform(...params) {\n      const modifiers: ModifierOptions = {\n        enqueue: false,\n        drop: false,\n      };\n\n      if (task._hasConcurrency && reachedMaxConcurrency(task)) {\n        if (task._isDropping) {\n          modifiers.drop = true;\n        }\n\n        if (task._isRestartable) {\n          cancelFirstRunning(task);\n        }\n\n        if (task._isKeepingLatest) {\n          dropEnqueued(task);\n        }\n\n        if (task._isEnqueuing || task._isKeepingLatest) {\n          modifiers.enqueue = true;\n        }\n      }\n\n      const onFinish = () => onTaskInstanceFinish(task);\n      const newInstance = createTaskInstance<T>(cb, params, {\n        modifiers,\n        onFinish,\n        id: task._instances.length + 1,\n      });\n      task._instances = [...task._instances, newInstance];\n      return newInstance;\n    },\n\n    clear() {\n      this.cancelAll();\n      this._instances = [];\n    },\n\n    restartable() {\n      task._resetModifierFlags();\n      task._isRestartable = true;\n      return task;\n    },\n\n    drop() {\n      task._resetModifierFlags();\n      task._isDropping = true;\n      return task;\n    },\n\n    enqueue() {\n      task._resetModifierFlags();\n      task._isEnqueuing = true;\n      return task;\n    },\n\n    keepLatest() {\n      task._resetModifierFlags();\n      task._isKeepingLatest = true;\n      return task;\n    },\n\n    _resetModifierFlags() {\n      task._isKeepingLatest = false;\n      task._isRestartable = false;\n      task._isEnqueuing = false;\n      task._isDropping = false;\n    },\n\n    maxConcurrency(number) {\n      task._maxConcurrency = number;\n      return task;\n    },\n  });\n  const task: Task<T, U> = _reactive(content);\n\n  onUnmounted(() => {\n    // check if there's instances still, Vue 3 might have done some cleanup already\n    if (task._instances) {\n      task.cancelAll();\n    }\n  });\n\n  // TODO: remove this type forcing\n  return task as Task<Resolved<T>, U>;\n}\n\nfunction onTaskInstanceFinish(task: Task<any, any>): void {\n  if (task._isEnqueuing || task._isKeepingLatest) {\n    const { firstEnqueued } = task;\n    if (firstEnqueued) {\n      firstEnqueued._run();\n    }\n  }\n\n  //TODO: run task.serialize() hook\n}\n","import useTask, { Task } from \"./Task\";\n\nexport function usePipeTask<T, U extends any[]>(\n  firstTask: Task<any, U>,\n  ...restTasks: Task<any, any>[]\n): Task<T, U> {\n  return useTask(function*(signal, ...args: U) {\n    let result = yield firstTask.perform(...args).canceledOn(signal);\n    for (let task of restTasks) {\n      result = yield task.perform(result).canceledOn(signal);\n    }\n\n    return result;\n  });\n}\n\nexport function useParallelTask(...tasks: Task<any, any>[]): Task<any[], any> {\n  return useTask(function*(signal, ...args) {\n    const instances = tasks.map((task) => {\n      return task.perform(...args).canceledOn(signal);\n    });\n\n    const values = yield Promise.all(instances);\n    return values as any[];\n  });\n}\n\nexport function useSequentialTask<U extends any[]>(\n  ...tasks: Task<any, any>[]\n): Task<any, U> {\n  return useTask(function*(signal, ...args: U) {\n    const instances: any[] = [];\n    for (let task of tasks) {\n      instances.push((yield task.perform(...args).canceledOn(signal)) as any);\n    }\n\n    return instances;\n  });\n}\n","import {\n  onServerPrefetch,\n  getCurrentInstance,\n  computed,\n} from \"./api\";\nimport { TaskInstance } from \"../TaskInstance\";\nimport { Task } from \"../Task\";\n\nconst isServer = () => typeof window === \"undefined\";\n\nexport function reviveTaskInstance(instance: TaskInstance<any>) {\n  if (instance.isError) {\n    instance._deferredObject.promise = Promise.reject(instance.error);\n  } else {\n    instance._deferredObject.promise = Promise.resolve(instance.value);\n  }\n\n  instance.cancel = () => { };\n  instance.canceledOn = () => instance;\n  instance._run = () => { };\n  instance.then = (...params) =>\n    instance._deferredObject.promise.then(...params);\n  instance.catch = (...params) =>\n    instance._deferredObject.promise.catch(...params);\n  instance.finally = (...params) =>\n    instance._deferredObject.promise.finally(...params);\n}\n\nexport function useTaskPrefetch<T>(\n  key: string,\n  task: Task<T, any>\n): TaskInstance<T> {\n  /* Server */\n  if (isServer()) {\n    // perform, add to prefetch, add to ssrContext\n    const taskInstance = task.perform();\n    onServerPrefetch(async () => {\n      try {\n        await taskInstance;\n        saveTaskToNuxtState(key, task);\n      } catch (e) {\n        // no need for extra handling\n      }\n    });\n    return taskInstance;\n  }\n\n  /* Client */\n  const [last] = reviveTaskInstances(key, task).reverse();\n\n  if (last) {\n    return last;\n  } else {\n    return task.perform();\n  }\n}\n\nfunction saveTaskToNuxtState(key: string, task: Task<any, any>) {\n  const { $root } = getCurrentInstance() as any;\n  const nuxtState = $root && $root.context && $root.context.nuxtState;\n  if (!nuxtState) {\n    throw new Error(\"Could not access $root.context.nuxtState\");\n  }\n\n  if (!nuxtState.vueConcurrency) {\n    nuxtState.vueConcurrency = {};\n  }\n\n  nuxtState.vueConcurrency[key] = computed(() => ({\n    instances: task._instances,\n  }));\n}\n\nfunction reviveTaskInstances(key: string, task: Task<any, any>) {\n  const taskCache = getTaskFromContext(key);\n  if (taskCache) {\n    task._instances = taskCache.instances || [];\n    task._instances.forEach(reviveTaskInstance);\n    deleteTaskCache(key);\n  }\n\n  return task._instances;\n}\n\nfunction getNuxtData() {\n  return (window as any).__NUXT__;\n}\n\nfunction getTaskFromContext(key) {\n  if (!getNuxtData()) {\n    throw Error(`Could not access  window.__NUXT__`);\n  }\n\n  return getNuxtData().vueConcurrency[key].value;\n}\n\nfunction deleteTaskCache(key) {\n  const nuxtData = getNuxtData();\n  delete nuxtData.vueConcurrency[key];\n}\n\nexport function useSSRPersistance(key: string, task: Task<any, any>) {\n  if (isServer()) {\n    saveTaskToNuxtState(key, task);\n    return;\n  }\n\n  reviveTaskInstances(key, task);\n}\n","import { Task } from \"./Task\";\nimport { reactive, computed } from \"./utils/api\";\n\nexport interface TaskState {\n  isRunning: boolean;\n  isIdle: boolean;\n}\n\nexport type TaskGroup<U extends Record<string, Task<any, any>>> = TaskState & U;\n\nexport default function useTaskGroup<U extends Record<string, Task<any, any>>>(\n  taskMap: U\n): TaskGroup<U> {\n  const taskArray = Object.values(taskMap);\n  const taskGroup = reactive({\n    isRunning: computed(() => !!taskArray.find((task) => task.isRunning)),\n    isIdle: computed(() => !taskGroup.isRunning),\n    ...taskMap,\n  });\n\n  return taskGroup;\n}\n"],"names":["waitForValue","cb","Promise","resolve","stop","watch","value","immediate","reachedMaxConcurrency","task","_runningInstances","length","_maxConcurrency","cancelFirstRunning","firstRunningInstance","_activeInstances","cancel","dropEnqueued","_enqueuedInstances","forEach","instance","isEnqueued","isDropped","filteredInstances","key","computed","filter","item","computedFilterBy","_instances","computedLength","computedLastOf","collection","computedFirstOf","_reactive","obj","reactive","printTask","taskType","_isDropping","_isEnqueuing","_isRestartable","_isKeepingLatest","header","instanceRows","map","colorEmoji","isSuccessful","isRunning","isError","isCanceled","status","error","console","log","table","timeout","time","process","env","NODE_ENV","setTimeout","getCancelToken","axios","signal","CancelToken","pr","reason","useAsyncTask","fn","useTask","createTaskInstance","params","options","deferredObject","promise","taskInstance","id","hasStarted","isFinished","isCanceling","isActive","isNotDropped","match","find","token","abort","canceledOn","e","_run","CAF","cancelToken","cancelable","setFinished","call","then","_deferredObject","onFinish","_shouldThrow","reject","runTaskInstance","_handled","onFulfilled","onRejected","modifiers","drop","enqueue","_hasConcurrency","isIdle","last","_successfulInstances","_notDroppedInstances","performCount","lastSuccessful","firstEnqueued","cancelAll","perform","onTaskInstanceFinish","newInstance","clear","this","restartable","_resetModifierFlags","keepLatest","maxConcurrency","number","onUnmounted","usePipeTask","firstTask","result","useParallelTask","instances","all","useSequentialTask","push","isServer","window","reviveTaskInstance","useTaskPrefetch","onServerPrefetch","saveTaskToNuxtState","reviveTaskInstances","reverse","$root","getCurrentInstance","nuxtState","context","Error","vueConcurrency","taskCache","getNuxtData","getTaskFromContext","deleteTaskCache","__NUXT__","useSSRPersistance","useTaskGroup","taskMap","taskArray","Object","values","taskGroup"],"mappings":"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"}